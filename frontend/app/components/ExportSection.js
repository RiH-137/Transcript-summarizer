'use client';
import { useState } from 'react';

export default function ExportSection({ summary, originalText, keyPoints = [] }) {
  const [isExporting, setIsExporting] = useState(false);

  // export as plain text
  function exportAsTxt() {
    if (!summary) return;
    const content = `SUMMARY\n========\n\n${summary}\n\n\nKEY POINTS\n==========\n\n${keyPoints.map((point, i) => `${i + 1}. ${point}`).join('\n')}`;
    downloadFile(content, 'summary.txt', 'text/plain');
  }

  // export as markdown
  function exportAsMarkdown() {
    if (!summary) return;
    const content = `# Summary\n\n${summary}\n\n## Key Points\n\n${keyPoints.map((point, i) => `${i + 1}. ${point}`).join('\n')}`;
    downloadFile(content, 'summary.md', 'text/markdown');
  }

  // export as html
  function exportAsHtml() {
    if (!summary) return;
    const htmlContent = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Summary Report</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; line-height: 1.6; color: #333; }
        h1 { color: #417C7E; border-bottom: 2px solid #417C7E; padding-bottom: 10px; }
        h2 { color: #417C7E; margin-top: 30px; }
        .key-points { background: #f8f9fa; padding: 15px; border-left: 4px solid #417C7E; margin: 20px 0; }
        .summary { background: white; padding: 20px; border: 1px solid #e1e5e9; border-radius: 8px; margin: 20px 0; }
    </style>
</head>
<body>
    <h1>Summary Report</h1>
    <div class="summary">
        <h2>Summary</h2>
        ${summary.replace(/\n/g, '<br>')}
    </div>
    
    <div class="key-points">
        <h2>Key Points</h2>
        <ol>
            ${keyPoints.map(point => `<li>${point}</li>`).join('')}
        </ol>
    </div>
    
    <footer style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #e1e5e9; color: #6c757d; font-size: 0.9em;">
        Generated by MangoDesk • ${new Date().toLocaleDateString()}
    </footer>
</body>
</html>`;
    downloadFile(htmlContent, 'summary.html', 'text/html');
  }

  // docx export
  async function exportAsDocx() {
    if (!summary) return;
    setIsExporting(true);
    
    try {
      const response = await fetch('http://localhost:3001/export-docx', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          summary: summary,
          keyPoints: keyPoints,
          originalText: originalText 
        }),
      });

      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'summary.docx';
        a.click();
        window.URL.revokeObjectURL(url);
      } else {
        // fallback to rtf format if DOCX endpoint doesn't exist
        exportAsRtf();
      }
    } catch (error) {
      console.error('Error exporting DOCX:', error);
      // fallback to RTF
      exportAsRtf();
    } finally {
      setIsExporting(false);
    }
  }

  // fallback RTF export (RTF-can be opened by word)
  function exportAsRtf() {
    const rtfContent = `{\\rtf1\\ansi\\deff0 
{\\fonttbl {\\f0 Times New Roman;}}
{\\colortbl;\\red65\\green124\\blue126;}
\\f0\\fs24
{\\cf1\\b\\fs32 SUMMARY REPORT\\par}
\\par
{\\cf1\\b\\fs28 Summary\\par}
\\par
${summary.replace(/\n/g, '\\par ')}
\\par
\\par
{\\cf1\\b\\fs28 Key Points\\par}
\\par
${keyPoints.map((point, i) => `${i + 1}. ${point}\\par `).join('')}
\\par
Generated by MangoDesk - ${new Date().toLocaleDateString()}
}`;
    downloadFile(rtfContent, 'summary.rtf', 'application/rtf');
  }

  // utility function to download file
  function downloadFile(content, filename, mimeType) {
    const blob = new Blob([content], { type: mimeType });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    a.click();
    window.URL.revokeObjectURL(url);
  }

  const hasContent = summary && summary.trim() && !summary.startsWith('❌') && summary !== 'Generating summary...';

  return (
    <div className="bg-white p-4 rounded shadow-sm border border-gray-200">
      <div className="flex items-center justify-between mb-3">
        <h3 className="font-medium text-gray-800 flex items-center">
          <span className="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
          Export Summary
        </h3>
        {isExporting && (
          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-green-500"></div>
        )}
      </div>

      {hasContent ? (
        <div className="grid grid-cols-2 gap-3">
          <button
            onClick={exportAsTxt}
            className="flex items-center justify-center px-3 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg text-sm font-medium text-gray-700 transition-colors border border-gray-300"
          >
            TXT
          </button>
          
          <button
            onClick={exportAsMarkdown}
            className="flex items-center justify-center px-3 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg text-sm font-medium text-gray-700 transition-colors border border-gray-300"
          >
            Markdown
          </button>
          
          <button
            onClick={exportAsHtml}
            className="flex items-center justify-center px-3 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg text-sm font-medium text-gray-700 transition-colors border border-gray-300"
          >
            HTML
          </button>
          
          <button
            onClick={exportAsDocx}
            disabled={isExporting}
            className="flex items-center justify-center px-3 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg text-sm font-medium text-gray-700 transition-colors border border-gray-300"
          >
            {isExporting ? 'Exporting...' : 'DOCX'}
          </button>
        </div>
      ) : (
        <div className="text-center py-6 text-gray-500">
          <p className="text-sm">Export options will appear after generating a summary</p>
        </div>
      )}

      {hasContent && (
        <div className="mt-3 text-xs text-gray-500 text-center">
          Choose format to download your summary
        </div>
      )}
    </div>
  );
}
