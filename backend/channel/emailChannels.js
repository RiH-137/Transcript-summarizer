const nodemailer = require('nodemailer');


const emailChannels = {
  sendEmail: async (req, res) => {
    try {
      const { to, subject, body, template } = req.body;
      
      if (!to || !body) {
        return res.status(400).json({ error: 'Email recipient and body are required' });
      }

      console.log('Email would be sent:', { to, subject, template, bodyLength: body.length });
      
      res.json({
        success: true,
        message: 'Email queued successfully (demo mode)',
        emailId: 'demo-' + Date.now()
      });

    } catch (error) {
      console.error('Email error:', error);
      res.status(500).json({ error: 'Email sending failed: ' + error.message });
    }
  },

  // email auth
  sendEmailWithAuth: async (req, res) => {
    try {
      console.log('Email endpoint called with body:', req.body);
      const { senderEmail, senderPassword, recipientEmail, subject, body, provider } = req.body;
      
      if (!senderEmail || !senderPassword || !recipientEmail || !body) {
        return res.status(400).json({ error: 'All email fields are required' });
      }

      console.log('Creating SMTP configuration for provider:', provider);

      // defining smtp settings
      const smtpSettings = {
        gmail: {
          service: 'gmail',
          host: 'smtp.gmail.com',
          port: 587,
          secure: false,
        },
        outlook: {
          service: 'hotmail',
          host: 'smtp-mail.outlook.com',
          port: 587,
          secure: false,
        },
        yahoo: {
          service: 'yahoo',
          host: 'smtp.mail.yahoo.com',
          port: 587,
          secure: false,
        },
        custom: {
          host: 'smtp.gmail.com',
          port: 587,
          secure: false,
        }
      };

      const config = smtpSettings[provider] || smtpSettings.gmail;
      console.log('SMTP config:', config);

      // creating transporter with user's credentials
      const transporter = nodemailer.createTransport({
        ...config,
        auth: {
          user: senderEmail,
          pass: senderPassword
        },
        tls: {
          rejectUnauthorized: false
        }
      });

      console.log('Transporter created, verifying...');
      // building and verifying SMTP connection
      try {
        await transporter.verify();
        console.log('SMTP verification successful');
      } catch (verifyError) {
        console.error('SMTP verification failed:', verifyError);
        return res.status(400).json({ 
          error: 'Failed to authenticate with email provider. Please check your credentials. For Gmail, make sure to use App Password instead of regular password.' 
        });
      }

      // email options
      const mailOptions = {
        from: {
          name: 'AppleDesk Summary',
          address: senderEmail
        },
        to: recipientEmail,
        subject: subject || 'Meeting Summary - AppleDesk',
        text: body,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
            <div style="background: linear-gradient(135deg, #417C7E, #5A9B9E); padding: 20px; border-radius: 8px 8px 0 0;">
              <h1 style="color: white; margin: 0; font-size: 24px;">AppleDesk Summary</h1>
            </div>
            
            <div style="background: #f8f9fa; padding: 30px; border: 1px solid #e1e5e9; border-radius: 0 0 8px 8px;">
              <div style="background: white; padding: 20px; border-radius: 6px; border-left: 4px solid #417C7E; margin-bottom: 20px;">
                <pre style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; white-space: pre-wrap; line-height: 1.6; color: #333; margin: 0;">${body}</pre>
              </div>
              
              <div style="text-align: center; padding-top: 20px; border-top: 1px solid #e1e5e9; color: #6c757d; font-size: 14px;">
                <p style="margin: 5px 0;">Generated by <strong>AppleDesk</strong></p>
                <p style="margin: 5px 0;">${new Date().toLocaleDateString()} â€¢ ${new Date().toLocaleTimeString()}</p>
              </div>
            </div>
          </div>
        `
      };

      // send email
      console.log('Sending email...');
      const info = await transporter.sendMail(mailOptions);
      
      console.log('Email sent successfully:', info.messageId);
      res.json({ 
        success: true, 
        message: 'Email sent successfully',
        messageId: info.messageId
      });

    } catch (error) {
      console.error('Email sending error:', error);
      let errorMessage = 'Failed to send email';
      
      if (error.code === 'EAUTH') {
        errorMessage = 'Authentication failed. Please check your email and password. For Gmail, use App Password instead of regular password.';
      } else if (error.code === 'ENOTFOUND') {
        errorMessage = 'Email service not found. Please check your email provider settings.';
      } else if (error.responseCode === 535) {
        errorMessage = 'Invalid credentials. For Gmail, make sure 2-Step Verification is enabled and use App Password.';
      } else {
        errorMessage = error.message || 'Failed to send email';
      }
      
      res.status(500).json({ error: errorMessage });
    }
  }
};

module.exports = emailChannels;
